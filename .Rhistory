df = subset(positions, select = -c(key.1) )
View(df)
colnames(initial_position) <- c("Names", "X values","Y values")
colnames(df) <- c("Names", "X values","Y values")
library(ggplot2)
library(tidyr)
#number of bacteria
bacteria <- 5
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
x = x+1
}
}
positions[,1] = name_matrix[,1]
df = subset(positions, select = -c(key.1) )
colnames(df) <- c("Names", "X values","Y values")
# Let's make a nice graph...
ggplot(df, aes("X values", "Y Values")) +
geom_line(size = 1, colour = "blue") +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', )
View(df)
library(ggplot2)
library(tidyr)
#number of bacteria
bacteria <- 5
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
x = x+1
}
}
positions[,1] = name_matrix[,1]
df = subset(positions, select = -c(key.1) )
colnames(df) <- c("Names", "X values","Y values")
df <- df %<% group_by(Names)
# Let's make a nice graph...
ggplot(df, aes("X values", "Y Values")) +
geom_line(size = 1, colour = "blue") +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', )
library(ggplot2)
library(tidyr)
library(dplyr)
#number of bacteria
bacteria <- 5
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
x = x+1
}
}
positions[,1] = name_matrix[,1]
df = subset(positions, select = -c(key.1) )
colnames(df) <- c("Names", "X values","Y values")
df <- df %<% group_by(Names)
# Let's make a nice graph...
ggplot(df, aes("X values", "Y Values")) +
geom_line(size = 1, colour = "blue") +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', )
library(ggplot2)
library(tidyr)
library(dplyr)
#number of bacteria
bacteria <- 5
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
x = x+1
}
}
positions[,1] = name_matrix[,1]
df = subset(positions, select = -c(key.1) )
colnames(df) <- c("Names", "X values","Y values")
df <- df %<% group_by(Names)
# Let's make a nice graph...
ggplot(df, aes("X values", "Y Values")) +
geom_line(size = 1, colour = "blue") +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', )
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
#number of bacteria
bacteria <- 5
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
x = x+1
}
}
positions[,1] = name_matrix[,1]
df = subset(positions, select = -c(key.1) )
colnames(df) <- c("Names", "X values","Y values")
df <- df %<% group_by(Names)
# Let's make a nice graph...
ggplot(df, aes("X values", "Y Values")) +
geom_line(size = 1, colour = "blue") +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', )
View(LifeExp)
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
#number of bacteria
bacteria <- 5
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
x = x+1
}
}
positions[,1] = name_matrix[,1]
df = subset(positions, select = -c(key.1) )
colnames(df) <- c("Names", "x_values","y_values")
df <- df %<% group_by(Names)
# Let's make a nice graph...
ggplot(df, aes(x = x_values, y = y_values)) +
geom_line(size = 1, colour = "blue") +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', )
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(gganimate)
library(directlabels)
#number of --> reduce this to test quicker
bacteria <- 25
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#Creating the central zone after which it no longer moves
for (i in seq(1, bacteria*2, 2)){
for (j in seq(1, steps-1)){
position_X = initial_position[j,i]
position_Y = initial_position[j,i+1]
norm = sqrt(abs(position_X)^2+abs(position_Y)^2)
if (norm <= 3){
initial_position[j+1,i] =  position_X
initial_position[j+1,i+1] = position_Y
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
time_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
integer = as.integer(j)
time_matrix[x,] = integer
x = x+1
}
}
positions[,1] = name_matrix[,1]
positions[,3] = time_matrix[,1]
colnames(positions) <- c("name", "x", "time", "y")
# Implementation of animation
p <- ggplot(data = positions, aes(x = y, y = x, color = name, group = name)) +
#geom_polygon(x = 0, y = 0, size = 44, alpha = 0.1, color = "orange", linetype = 1) +
geom_circle(aes(x0 = 0, y0 = 0, r = 1), radius = 3) +
annotate("text", x = 0, y = 0, label = "SUGAR", col = "white", size = 6) +
geom_point(pch = 11) +
geom_line(alpha = 0.4) +
theme_bw() +
theme(plot.title = element_text(face = "bold")) +
theme(legend.position = "none") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(name = 'X Position', breaks = seq(-10,10, by = 5)) +
scale_y_continuous(name = 'Y Position', breaks = seq(-10,10, by = 5)) +
transition_reveal(time) +
labs(title = 'Bacteria Mobility') +
coord_cartesian(ylim = c(-10,10), xlim = c(-12,12))
#duration calculation : 120 frames, want them to last 0.2 sec/frame --> 120*0.25 = 30 seconds
animate(p, duration = 30 , fps = 8)
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(gganimate)
library(directlabels)
library(ggforce)
#number of --> reduce this to test quicker
bacteria <- 25
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#Creating the central zone after which it no longer moves
for (i in seq(1, bacteria*2, 2)){
for (j in seq(1, steps-1)){
position_X = initial_position[j,i]
position_Y = initial_position[j,i+1]
norm = sqrt(abs(position_X)^2+abs(position_Y)^2)
if (norm <= 3){
initial_position[j+1,i] =  position_X
initial_position[j+1,i+1] = position_Y
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
time_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
integer = as.integer(j)
time_matrix[x,] = integer
x = x+1
}
}
positions[,1] = name_matrix[,1]
positions[,3] = time_matrix[,1]
colnames(positions) <- c("name", "x", "time", "y")
# Implementation of animation
p <- ggplot(data = positions, aes(x = y, y = x, color = name, group = name)) +
#geom_polygon(x = 0, y = 0, size = 44, alpha = 0.1, color = "orange", linetype = 1) +
geom_circle(aes(x0 = 0, y0 = 0, r = 1), radius = 3) +
annotate("text", x = 0, y = 0, label = "SUGAR", col = "white", size = 6) +
geom_point(pch = 11) +
geom_line(alpha = 0.4) +
theme_bw() +
theme(plot.title = element_text(face = "bold")) +
theme(legend.position = "none") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(name = 'X Position', breaks = seq(-10,10, by = 5)) +
scale_y_continuous(name = 'Y Position', breaks = seq(-10,10, by = 5)) +
transition_reveal(time) +
labs(title = 'Bacteria Mobility') +
coord_cartesian(ylim = c(-10,10), xlim = c(-12,12))
#duration calculation : 120 frames, want them to last 0.2 sec/frame --> 120*0.25 = 30 seconds
animate(p, duration = 30 , fps = 8)
