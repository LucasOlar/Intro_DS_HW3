labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', )
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
#number of bacteria
bacteria <- 5
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
x = x+1
}
}
positions[,1] = name_matrix[,1]
df = subset(positions, select = -c(key.1) )
colnames(df) <- c("Names", "X values","Y values")
df <- df %<% group_by(Names)
# Let's make a nice graph...
ggplot(df, aes("X values", "Y Values")) +
geom_line(size = 1, colour = "blue") +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', )
View(LifeExp)
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
#number of bacteria
bacteria <- 5
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
x = x+1
}
}
positions[,1] = name_matrix[,1]
df = subset(positions, select = -c(key.1) )
colnames(df) <- c("Names", "x_values","y_values")
df <- df %<% group_by(Names)
# Let's make a nice graph...
ggplot(df, aes(x = x_values, y = y_values)) +
geom_line(size = 1, colour = "blue") +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', )
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(gganimate)
library(directlabels)
#number of bacteria
bacteria <- 25
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#Creating the central zone after which it no longer moves
for (i in seq(1, bacteria*2, 2)){
for (j in seq(1, steps-1)){
position_X = initial_position[j,i]
position_Y = initial_position[j,i+1]
norm = sqrt(abs(position_X)^2+abs(position_Y)^2)
if (norm <= 3){
initial_position[j+1,i] =  position_X
initial_position[j+1,i+1] = position_Y
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
time_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
integer = as.integer(j)
time_matrix[x,] = integer
x = x+1
}
}
positions[,1] = name_matrix[,1]
positions[,3] = time_matrix[,1]
colnames(positions) <- c("name", "x", "time", "y")
# Implementation of animation
p <- ggplot(data = positions, aes(x = y, y = x, color = name, group = name)) +
geom_point(shape = 11) +
geom_line(alpha = 0.4) +
theme_bw() +
theme(legend.position = "none") +
theme(plot.title = element_text(hjust = 0.5)) +
transition_reveal(time) +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', ) +
coord_cartesian(xlim=c(-15, 15)) +
coord_cartesian(ylim=c(-15, 15))
#duration calculation : 120 frames, want them to last 0.2 sec/frame --> 120*0.2 = 24 seconds
animate(p, duration = 24 , fps = 10)
a=ggplot(bacteria1, aes(x,y))+geom_path(size=0.1, colour = color[1])+geom_point(shape= "square", size=7)
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(gganimate)
library(directlabels)
#number of bacteria
bacteria <- 25
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#Creating the central zone after which it no longer moves
for (i in seq(1, bacteria*2, 2)){
for (j in seq(1, steps-1)){
position_X = initial_position[j,i]
position_Y = initial_position[j,i+1]
norm = sqrt(abs(position_X)^2+abs(position_Y)^2)
if (norm <= 3){
initial_position[j+1,i] =  position_X
initial_position[j+1,i+1] = position_Y
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
time_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
integer = as.integer(j)
time_matrix[x,] = integer
x = x+1
}
}
positions[,1] = name_matrix[,1]
positions[,3] = time_matrix[,1]
colnames(positions) <- c("name", "x", "time", "y")
# Implementation of animation
p <- ggplot(data = positions, aes(x = y, y = x, color = name, group = name)) +
geom_point(shape = 11) +
geom_line(alpha = 0.4) +
theme_bw() +
theme(legend.position = "none") +
theme(plot.title = element_text(hjust = 0.5)) +
transition_reveal(time) +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', ) +
coord_cartesian(xlim=c(-15, 15)) +
coord_cartesian(ylim=c(-15, 15))
#duration calculation : 120 frames, want them to last 0.2 sec/frame --> 120*0.2 = 24 seconds
animate(p, duration = 24 , fps = 10)
a=ggplot(bacteria1, aes(x,y))+geom_path(size=0.1, colour = color[1])+geom_point(shape= "square", size=7)
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(gganimate)
library(directlabels)
#number of bacteria
bacteria <- 25
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#Creating the central zone after which it no longer moves
for (i in seq(1, bacteria*2, 2)){
for (j in seq(1, steps-1)){
position_X = initial_position[j,i]
position_Y = initial_position[j,i+1]
norm = sqrt(abs(position_X)^2+abs(position_Y)^2)
if (norm <= 3){
initial_position[j+1,i] =  position_X
initial_position[j+1,i+1] = position_Y
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
time_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
integer = as.integer(j)
time_matrix[x,] = integer
x = x+1
}
}
positions[,1] = name_matrix[,1]
positions[,3] = time_matrix[,1]
colnames(positions) <- c("name", "x", "time", "y")
# Implementation of animation
p <- ggplot(data = positions, aes(x = y, y = x, color = name, group = name)) +
geom_point(shape = 11) +
geom_line(alpha = 0.4) +
theme_bw("alien") +
theme(legend.position = "none") +
theme(plot.title = element_text(hjust = 0.5)) +
transition_reveal(time) +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', ) +
coord_cartesian(xlim=c(-15, 15)) +
coord_cartesian(ylim=c(-15, 15))
#duration calculation : 120 frames, want them to last 0.2 sec/frame --> 120*0.2 = 24 seconds
animate(p, duration = 24 , fps = 10)
library(dplyr)
library(ggplot2)
library(gganimate)
open <- c(.16, 1 - .16)
closed <- c(.02, .98)
colors <- c("#EDD63F", "#4C4C4C") # yellow and dark gray
data <- tibble(
position = c(open, closed),
frame = c(1,1,2,2),
body_part = rep(c("mouth", "head"), 2)
)
gg <- data %>%
ggplot(aes(x = 1, y = position, fill = body_part)) +
geom_col(width = 1) +
coord_polar(theta = "y", start = 1.2) +
annotate("text", x = 1.2, y = .93, label = "O", size = 10) +
scale_fill_manual(values = colors) +
theme_void() +
transition_states(frame, 5, 1)
anim_save("ggpietalk1", animate(gg, nframes = 20, fps = 20))
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(gganimate)
library(directlabels)
#number of bacteria
bacteria <- 25
# Number of steps
steps <- 120
#initial position
initial_position <- matrix(0, steps, bacteria*2)
#Give an initial position
for (i in seq(0, bacteria*2)){
initial_position [1,i] = runif(1, min = -8, max = 8)
}
# Start random walk
for (i in seq(1, steps-1)){
#determining the position at point t = 1
for(j in seq(1,bacteria*2)){
# Draw a random number
St = runif(1, 0, 2)
#Drawing a random delta
delta = runif(1, min = 0, max = 2*pi)
if(j %% 2 == 0){
initial_position[i+1,j] = initial_position[i,j] + St*sin(delta)
}
else {
initial_position[i+1,j] = initial_position[i,j] + St*cos(delta)
}
}
}
#Creating the central zone after which it no longer moves
for (i in seq(1, bacteria*2, 2)){
for (j in seq(1, steps-1)){
position_X = initial_position[j,i]
position_Y = initial_position[j,i+1]
norm = sqrt(abs(position_X)^2+abs(position_Y)^2)
if (norm <= 3){
initial_position[j+1,i] =  position_X
initial_position[j+1,i+1] = position_Y
}
}
}
#putting the columns below each other
seq_even = seq(from = 2, to = 2*bacteria, by = 2)
positions_even = data.frame(initial_position[,seq_even])
positions_even = tidyr::gather(positions_even)
seq_uneven = seq(from = 1, to = 2*bacteria, by = 2)
positions_uneven = data.frame(initial_position[,seq_uneven])
positions_uneven = tidyr::gather(positions_uneven)
positions <- data.frame(cbind(positions_uneven, positions_even))
#Naming data
x = 1
name_matrix <- matrix(NA, steps*bacteria, 1)
time_matrix <- matrix(NA, steps*bacteria, 1)
for (i in seq(from = 1, to = bacteria)){
for (j in seq(from = 1, to = steps)){
name_matrix[x,] = paste("Bacteria ", i)
integer = as.integer(j)
time_matrix[x,] = integer
x = x+1
}
}
positions[,1] = name_matrix[,1]
positions[,3] = time_matrix[,1]
colnames(positions) <- c("name", "x", "time", "y")
# Implementation of animation
p <- ggplot(data = positions, aes(x = y, y = x, color = name, group = name)) +
geom_point(shape = 11) +
scale_shape_manual() +
geom_line(alpha = 0.4) +
theme_bw() +
theme(legend.position = "none") +
theme(plot.title = element_text(hjust = 0.5)) +
transition_reveal(time) +
labs(title = 'Bacteria Mobility',
x = 'X Position',
y = 'Y Position', ) +
coord_cartesian(xlim=c(-15, 15)) +
coord_cartesian(ylim=c(-15, 15))
#duration calculation : 120 frames, want them to last 0.2 sec/frame --> 120*0.2 = 24 seconds
animate(p, duration = 24 , fps = 10)
library(ggplot2)
library(grid)
## replace by a named list with matrices to be displayed
## by rasterGrob
.flaglist <- list("ar" = matrix(c("blue", "white", "blue"), 1),
"fr" = matrix(c("blue", "white", "red"), 1))
flagGrob <- function(x, y, country, size=1, alpha=1){
grob(x=x, y=y, country=country, size=size, cl = "flag")
}
drawDetails.flag <- function(x, recording=FALSE){
for(ii in seq_along(x$country)){
grid.raster(x$x[ii], x$y[ii],
width = x$size[ii]*unit(1,"mm"), height = x$size[ii]*unit(0.5,"mm"),
image = .flaglist[[x$country[[ii]]]], interpolate=FALSE)
}
}
scale_country <- function(..., guide = "legend") {
sc <- discrete_scale("country", "identity", scales::identity_pal(), ..., guide = guide)
sc$super <- ScaleDiscreteIdentity
class(sc) <- class(ScaleDiscreteIdentity)
sc
}
GeomFlag <- ggproto("GeomFlag", Geom,
required_aes = c("x", "y", "country"),
default_aes = aes(size = 5, country="fr"),
draw_key = function (data, params, size)
{
flagGrob(0.5,0.5, country=data$country,  size=data$size)
},
draw_group = function(data, panel_scales, coord) {
coords <- coord$transform(data, panel_scales)
flagGrob(coords$x, coords$y, coords$country, coords$size)
}
)
geom_flag <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomFlag, mapping = mapping,  data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
